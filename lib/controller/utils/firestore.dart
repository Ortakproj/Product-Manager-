import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:product_manager/Model/models/product.dart';


class FireStore {
  // just a simple get
  static Future<List<Product>> getAllEntries(String collection) async {
    return (await FirebaseFirestore.instance.collection(collection).get())
        .docs
        .map((item) {
      var data = item.data();
      data['id'] = item.reference.id;
      return Product.fromMapObject(data);
    }).toList();
  }

  // get with custom order
  static Future<List<Product>> getAllEntriesSortedByName(
      String collection, String idUser) async {

    List<Product> result = [];
    QuerySnapshot querySnapshot = await FirebaseFirestore.instance
        .collection(collection)
        .where('id_user_created', isEqualTo: idUser)
        .orderBy("name", descending: false)
        .get();
    List<Map<String, dynamic>> documents = querySnapshot.docs
        .map((doc) { var data = doc.data() as Map<String, dynamic>; data['id'] = doc.id;  return data;  })
        .toList();

    for (var doc in documents) {
        result.add(Product.fromMapObject(doc)); // print data of each document
    }
    return result;
  }

  // get with filter
  static Future<Product?> getEntryById(String collection, String id) async {
    DocumentSnapshot<Map<String, dynamic>>? snapshot =
        await FirebaseFirestore.instance.collection(collection).doc(id).get();

    Map<String, dynamic>? data = snapshot.data();
    if (data != null) {
      var map = <String, dynamic>{};
      map['id'] = id;
      map['name'] = data['name'];
      map['description'] = data['description'];
      map['category'] = data['category'];
      map['brand'] = data['brand'];
      map['stockquantity'] = data['stockquantity'];
      map['price'] = data['price'];
      map['date'] = data['date'];
      map['id_user_created'] = data['id_user_created'];
      return Product.fromMapObject(map);
    } else {
      print('The document does not exist');
    }
    return null;
  }

  static Future addEntryWithAutogeneratedId(
      String collection, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance.collection(collection).add(data);
  }

  // updates an existing entry (missing fields won't be touched on update), document must exist
  static Future updateEntryWithId(
      String collection, String documentId, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .update(data);
  }

  // adds or updates an existing entry (missing fields will be deleted on update!), document will be created if needed
  static Future addOrUpdateWithId(
      String collection, String documentId, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .set(data);
  }

  // deletes the entry with the given document id
  static Future deleteEntry(String collection, String documentId) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .delete();
  }
}
